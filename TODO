Editor / pager as unique tool
________________________________________________________________________________

	Do one thing and do it well.  Reading and editing text is the same
	thing, so to do both of these, we need a single tool.

	Displaying a buffer of lines on a screen, with apropriate width, and
	height according to the terminal.  The editor support all of this, as
	do the pager, so the pager gets useless while an editor is out there.


Not expanding tabs to space in interface
________________________________________________________________________________

	Just display tabs as is and make nums at the left shift text either 0
	if not displayed, or 8 if displayed.

	This will only cause issue if:

	1	The buffer has 10 000 000 lines or more.

	2	It has a tab after a multiple of 7 characters.

	3	This very same line is larger than the width of the screen.

	It is then a remarkably rare event, reason why I do not need to support
	it.


Diff-based history
________________________________________________________________________________

	Generate a simplistic diff for every change (in plain text, or with
	an 'History' C struct).

	Do not hide deleted lines.  Make them unreachable, but keep them
	onscreen, grayed out (with a mode to disable this).  Then, while
	saving, remove them from the screen.

	Use a line struct with states: modified (the text content has been
	modified, with an array of previous changes for this line), added
	(the line is new, an there is an empty array as history), deleted
	(for use with visual history).

	For each state, associate the line number with a color:
	
	-	Red if line is grayed out and deleted

	-	Green if some line is inserted

	-	Yellow / Orange if the content is changed

	-	Gray if line remain untouched

	In addition, highlight the current line number.

	On file save, reset all states to saved.

	In the end, keep a separate line change history, and line content
	history with an array of things that changed in the text strings.

	Use a list of revisions for editing changes, with links to the
	previous and next revisions in history.  The "next" and "previous"
	entries of the struct that could evolve from "Line *next" to
	"Line *next[]".


Auto-indentation
________________________________________________________________________________

	Simple, language-independent auto indentation, with tabs support:
	if a tab is not at the beginning of a line, consider it as a bullet
	mark, and indent the rest of the text to this level (with only one
	tab).
	
	That is, add the same number of tabs to the next line as the one in
	the current line while adding a line.

	Do not promote anything else than tab for indentation, so do not
	support space for indentation, exception for some LISP mode if it
	ever comes.


Directory structure
________________________________________________________________________________

	Use standard "$XDG_USER_DIRS" directories.


$XDG_CONFIG_HOME/editor/rc


$XDG_CACHE_HOME/editor/clipboard/[0-9a-z]

	One plain clipboard file per register, alnum only (+ one for delete
	register?).


$XDG_CACHE_HOME/editor/commands

	Plain text history of ':' commands, most recent last.


$XDG_CACHE_HOME/editor/searches

	Plain text history of '/' and '?' searches, most recent last.


$XDG_CACHE_HOME/editor/marks

	Plain text history of text marks, in the format "filename:line:column"

	As we support reading this format, perhaps always read file as if they
	were in this format.


$XDG_CACHE_HOME/editor/backups/.+/[0-9]+

	".+" directory is the name of every file ever open in the editor,
	with the '/' replaced by '!', and "$HOME" replaced by '~'.
	In it, diffs for every save, eventually generated by the editor
	itself, but more probably by a diff command.


Options
________________________________________________________________________________


autoindent

	This is the only option to switch while willing to paste some text.


textwidth

	Width for autowrap, colorcolumn...


colorcolumn

	
